/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <100>;
        };

        left_brace: left_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BRACE";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        right_brace: right_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACE";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        left_curly: left_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_CURLY";
            bindings = <&kp LEFT_BRACE>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        right_curly: right_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_CURLY";
            bindings = <&kp RIGHT_BRACE>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        left_bracket: left_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BRACKET";
            bindings = <&kp LEFT_BRACKET>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        right_bracket: right_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACKET";
            bindings = <&kp RIGHT_BRACKET>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        plus_one: plus_one {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_ONE";
            bindings = <&kp PLUS>, <&kp NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        zero_dollar: zero_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "ZERO_DOLLAR";
            bindings = <&kp DOLLAR>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        equal_six: equal_six {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_SIX";
            bindings = <&kp EQUAL>, <&kp NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        and_five: and_five {
            compatible = "zmk,behavior-mod-morph";
            label = "AND_FIVE";
            bindings = <&kp AMPERSAND>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        atsign_caret: atsign_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "ATSIGN_CARET";
            bindings = <&kp AT_SIGN>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        asterisk_hash: asterisk_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "ASTERISK_HASH";
            bindings = <&kp ASTERISK>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        exlamation_percent: exlamation_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "EXLAMATION_PERCENT";
            bindings = <&kp EXCLAMATION>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1     &kp NUMBER_2  &kp NUMBER_3  &kp N4     &kp N5  &tog 1                                                              &mo 3          &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q      &kp W         &kp E         &kp R      &kp T   &kp LA(PRINTSCREEN)                                                 &kp CAPSLOCK   &kp Z   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A      &kp S         &kp D         &kp F      &kp G   &kp RS(RG(S))        &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &tog 4         &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Y      &kp X         &kp C         &kp V      &kp B                                   &kp HOME      &kp PG_UP                            &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
&mo 2      &kp GRAVE  &kp LEFT_GUI  &kp LEFT      &kp RIGHT          &kp SPACE            &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp BACKSPACE          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 3      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_4 {
            bindings = <
&exlamation_percent  &plus_one  &left_bracket  &left_curly  &left_brace  &and_five  &tog 1                                                              &mo 3          &equal_six  &right_brace  &right_curly  &right_bracket  &zero_dollar   &kp MINUS
&kp TAB              &kp Q      &kp W          &kp E        &kp R        &kp T      &kp LA(PRINTSCREEN)                                                 &kp CAPSLOCK   &kp Z       &kp U         &kp I         &kp O           &kp P          &kp BSLH
&kp ESC              &kp A      &kp S          &kp D        &kp F        &kp G      &kp RS(RG(S))        &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &trans         &kp H       &kp J         &kp K         &kp L           &kp SEMI       &kp SQT
&kp LSHFT            &kp Y      &kp X          &kp C        &kp V        &kp B                                      &kp HOME      &kp PG_UP                            &kp N       &kp M         &kp COMMA     &kp DOT         &kp FSLH       &kp RSHFT
&trans               &kp GRAVE  &kp LEFT_GUI   &kp LEFT     &kp RIGHT               &kp SPACE            &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp BACKSPACE              &kp UP        &kp DOWN      &asterisk_hash  &atsign_caret  &trans
            >;
        };
    };
};
